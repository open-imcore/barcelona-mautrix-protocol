//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: ipc/v1/v1.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `BarcelonaClient`, then call methods of this protocol to make API calls.
public protocol BarcelonaClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: BarcelonaClientInterceptorFactoryProtocol? { get }

  func requestHistory(
    _ request: PBHistoryQuery,
    callOptions: CallOptions?
  ) -> UnaryCall<PBHistoryQuery, PBMessageList>
}

extension BarcelonaClientProtocol {
  public var serviceName: String {
    return "Barcelona"
  }

  /// Unary call to RequestHistory
  ///
  /// - Parameters:
  ///   - request: Request to send to RequestHistory.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func requestHistory(
    _ request: PBHistoryQuery,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<PBHistoryQuery, PBMessageList> {
    return self.makeUnaryCall(
      path: BarcelonaClientMetadata.Methods.requestHistory.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRequestHistoryInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension BarcelonaClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "BarcelonaNIOClient")
public final class BarcelonaClient: BarcelonaClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: BarcelonaClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: BarcelonaClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the Barcelona service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: BarcelonaClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct BarcelonaNIOClient: BarcelonaClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: BarcelonaClientInterceptorFactoryProtocol?

  /// Creates a client for the Barcelona service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: BarcelonaClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol BarcelonaAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: BarcelonaClientInterceptorFactoryProtocol? { get }

  func makeRequestHistoryCall(
    _ request: PBHistoryQuery,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<PBHistoryQuery, PBMessageList>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension BarcelonaAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return BarcelonaClientMetadata.serviceDescriptor
  }

  public var interceptors: BarcelonaClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeRequestHistoryCall(
    _ request: PBHistoryQuery,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<PBHistoryQuery, PBMessageList> {
    return self.makeAsyncUnaryCall(
      path: BarcelonaClientMetadata.Methods.requestHistory.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRequestHistoryInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension BarcelonaAsyncClientProtocol {
  public func requestHistory(
    _ request: PBHistoryQuery,
    callOptions: CallOptions? = nil
  ) async throws -> PBMessageList {
    return try await self.performAsyncUnaryCall(
      path: BarcelonaClientMetadata.Methods.requestHistory.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRequestHistoryInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct BarcelonaAsyncClient: BarcelonaAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: BarcelonaClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: BarcelonaClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

public protocol BarcelonaClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'requestHistory'.
  func makeRequestHistoryInterceptors() -> [ClientInterceptor<PBHistoryQuery, PBMessageList>]
}

public enum BarcelonaClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Barcelona",
    fullName: "Barcelona",
    methods: [
      BarcelonaClientMetadata.Methods.requestHistory,
    ]
  )

  public enum Methods {
    public static let requestHistory = GRPCMethodDescriptor(
      name: "RequestHistory",
      path: "/Barcelona/RequestHistory",
      type: GRPCCallType.unary
    )
  }
}

/// Usage: instantiate `BridgeClient`, then call methods of this protocol to make API calls.
public protocol BridgeClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: BridgeClientInterceptorFactoryProtocol? { get }
}

extension BridgeClientProtocol {
  public var serviceName: String {
    return "Bridge"
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension BridgeClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "BridgeNIOClient")
public final class BridgeClient: BridgeClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: BridgeClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: BridgeClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the Bridge service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: BridgeClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct BridgeNIOClient: BridgeClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: BridgeClientInterceptorFactoryProtocol?

  /// Creates a client for the Bridge service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: BridgeClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol BridgeAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: BridgeClientInterceptorFactoryProtocol? { get }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension BridgeAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return BridgeClientMetadata.serviceDescriptor
  }

  public var interceptors: BridgeClientInterceptorFactoryProtocol? {
    return nil
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension BridgeAsyncClientProtocol {
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct BridgeAsyncClient: BridgeAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: BridgeClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: BridgeClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

public protocol BridgeClientInterceptorFactoryProtocol: GRPCSendable {
}

public enum BridgeClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Bridge",
    fullName: "Bridge",
    methods: [
    ]
  )

  public enum Methods {
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol BarcelonaProvider: CallHandlerProvider {
  var interceptors: BarcelonaServerInterceptorFactoryProtocol? { get }

  func requestHistory(request: PBHistoryQuery, context: StatusOnlyCallContext) -> EventLoopFuture<PBMessageList>
}

extension BarcelonaProvider {
  public var serviceName: Substring {
    return BarcelonaServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "RequestHistory":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<PBHistoryQuery>(),
        responseSerializer: ProtobufSerializer<PBMessageList>(),
        interceptors: self.interceptors?.makeRequestHistoryInterceptors() ?? [],
        userFunction: self.requestHistory(request:context:)
      )

    default:
      return nil
    }
  }
}

#if compiler(>=5.6)

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol BarcelonaAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: BarcelonaServerInterceptorFactoryProtocol? { get }

  @Sendable func requestHistory(
    request: PBHistoryQuery,
    context: GRPCAsyncServerCallContext
  ) async throws -> PBMessageList
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension BarcelonaAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return BarcelonaServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return BarcelonaServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: BarcelonaServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "RequestHistory":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<PBHistoryQuery>(),
        responseSerializer: ProtobufSerializer<PBMessageList>(),
        interceptors: self.interceptors?.makeRequestHistoryInterceptors() ?? [],
        wrapping: self.requestHistory(request:context:)
      )

    default:
      return nil
    }
  }
}

#endif // compiler(>=5.6)

public protocol BarcelonaServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'requestHistory'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRequestHistoryInterceptors() -> [ServerInterceptor<PBHistoryQuery, PBMessageList>]
}

public enum BarcelonaServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Barcelona",
    fullName: "Barcelona",
    methods: [
      BarcelonaServerMetadata.Methods.requestHistory,
    ]
  )

  public enum Methods {
    public static let requestHistory = GRPCMethodDescriptor(
      name: "RequestHistory",
      path: "/Barcelona/RequestHistory",
      type: GRPCCallType.unary
    )
  }
}
/// To build a server, implement a class that conforms to this protocol.
public protocol BridgeProvider: CallHandlerProvider {
  var interceptors: BridgeServerInterceptorFactoryProtocol? { get }
}

extension BridgeProvider {
  public var serviceName: Substring {
    return BridgeServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    default:
      return nil
    }
  }
}

#if compiler(>=5.6)

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol BridgeAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: BridgeServerInterceptorFactoryProtocol? { get }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension BridgeAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return BridgeServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return BridgeServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: BridgeServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    default:
      return nil
    }
  }
}

#endif // compiler(>=5.6)

public protocol BridgeServerInterceptorFactoryProtocol {
}

public enum BridgeServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Bridge",
    fullName: "Bridge",
    methods: [
    ]
  )

  public enum Methods {
  }
}
